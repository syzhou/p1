#include "Meeting.h"
#include "Ordered_container.h"
#include "Utility.h"
/* a Meeting contains a time, a topic, and a container of participants */
struct Meeting {
	char* topic;
	int time;
	struct Ordered_container* participants;	/* a container of pointers to struct Person objects */
};

/* Create a Meeting object.
This is the only function that allocates memory for a Meeting
and the contained data. */
struct Meeting* create_Meeting(int time, const char* topic) {
	struct Meeting* newMeeting = malloc(sizeof(struct Meeting));
	newMeeting->time = time;
	strAllocCpy(newMeeting->topic, topic);
	newMeeting->participants = OC_create_container(comparePeople);
	return newMeeting;
}

/* Destroy a Meeting object.
This is the only function that frees the memory for a Meeting
and the contained data. It discards the participant list,
but of course does not delete the Persons themselves. */
void destroy_Meeting(struct Meeting* meeting_ptr) {
	free(meeting_ptr->topic);
	OC_destroy_container(meeting_ptr->participants);
	free(meeting_ptr);
}

/* Return and set the meeting time. */
int get_Meeting_time(const struct Meeting* meeting_ptr) {
	return meeting_ptr->time;
}
void set_Meeting_time(struct Meeting* meeting_ptr, int time) {
	meeting_ptr->time = time;
}

/* Add a participant; return non-zero and do nothing if already present. */
int add_Meeting_participant(struct Meeting* meeting_ptr, const struct Person* person_ptr);

/* Return non-zero if the person is a participant, zero if not. */
int is_Meeting_participant_present(const struct Meeting* meeting_ptr, const struct Person * person_ptr);

/* Remove a participant; return non-zero if not present, zero if was present. */
int remove_Meeting_participant(struct Meeting* meeting_ptr, const struct Person* person_ptr);

/* Print the data in a struct Meeting. */
void print_Meeting(const struct Meeting* meeting_ptr);

/* Write the data in a Meeting to a file. */
void save_Meeting(const struct Meeting* meeting_ptr, FILE* outfile);

/* Read a Meeting's data from a file stream, create the data object and
return a pointer to it, NULL if invalid data discovered in file.
No check made for whether the Meeting already exists or not. */
struct Meeting* load_Meeting(FILE* input_file, const struct Ordered_container* people);
