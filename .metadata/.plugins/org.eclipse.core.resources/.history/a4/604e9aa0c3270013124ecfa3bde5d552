#ifndef UTILITY_H
#define UTILITY_H


#define MAX_STRING_LENGTH 63
#define BUFFER_SIZE MAX_STRING_LENGTH + 1
#define FMTSTR "%63s"
#define SAFESCANF(s) scanf(FMTSTR, s)
#define SAFEFSCANF(f,s) fscanf(f, FMTSTR, s)

struct Person;
struct Ordered_container;

/* The following two functions manipulate string allocation
 * and deallocation to make string memory counting at one place.
 */

/* Allocate the memory for the new string and copy the source string
 * to the destination string.
 * Return the pointer to the new string.
 */
char* strAllocCpy(const char* source);

/* Deallocate the string pointed by s.
 */
void freeString(char* s);

/* Comparison function for people structure. Compares two people by lastname.
 */
int comparePeople (const void* data_ptr1, const void* data_ptr2);

/*Find a person by lastname and returns a pointer to the person structure.
 * The function takes the pointer to the ordered containter and the lastname
 * as parameters.
 */
struct Person *findPersonByLastname (const struct Ordered_container* people, char* lastname);

/*Add a person to an ordered container. Return 0 if successful.
 * Don't add to the container and return non-zero if that person already exist.
 */
int addPersonIfNotExist(const struct Person* person_ptr, struct Ordered_container* people);

/*Remove a person from an ordered container.
 * Return 0 if sucessful.
 * Don't remove and returns non-zero if that person is not present.
 */
int removePersonIfExist(const struct Person* person_ptr, struct Ordered_container* people);

int compareTime(int meetingTime1, int meetingTime2);

#endif
